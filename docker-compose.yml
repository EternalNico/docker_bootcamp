version: '3.8'

services:
  # Exercice 1 : Application Flask
  flask-app:
    build:
      context: ./exercice1
      dockerfile: Dockerfile
    ports:
      - "5001:5000" # Mappe le port 5000 du conteneur au port 5001 de l'hôte
    container_name: flask-app
    restart: unless-stopped

  # Exercice 2 : Application Nginx
  nginx-app:
    build:
      context: ./exercice2
      dockerfile: Dockerfile
    ports:
      - "10001:10000" # Mappe le port 10000 du conteneur au port 8082 de l'hôte
    container_name: nginx-app
    restart: unless-stopped

  # Exercice 3 : Application avec volumes
  volume-app:
    image: ubuntu:20.04
    container_name: volume-app
    volumes:
      - data-volume:/data # Volume pour la persistance des données
      - logs-volume:/var/log/app # Volume pour les logs
      - ./exercice3/config:/etc/app:ro # Montage en lecture seule pour les configurations
    command: ["tail", "-f", "/dev/null"] # Garde le conteneur actif pour tester les volumes
    restart: unless-stopped

  # Exercice 4 : Application Web avec Nginx
  web-app:
    image: python:3.9-slim
    container_name: web-app
    working_dir: /app
    volumes:
      - ./exercice4/web-app:/app
    command: ["python", "-m", "http.server", "10003"]
    expose:
      - "10003"
    networks:
      - custom-network

  nginx-proxy:
    image: nginx:latest
    container_name: nginx-proxy
    volumes:
      - ./exercice4/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "10004:10004"
    networks:
      - custom-network

  # Exercice 5 : Application Flask avec Nginx
  flask-app-2:
    build:
      context: ./exercice5
      dockerfile: Dockerfile.app
    container_name: flask-app-2
    ports:
      - "10006:10006"
    networks:
      - app-network-2
    restart: unless-stopped

  nginx-2:
    build:
      context: ./exercice5
      dockerfile: Dockerfile.nginx
    container_name: nginx-2
    ports:
      - "10005:10005" 
    depends_on:
      - flask-app-2
    networks:
      - app-network-2


volumes:
  data-volume:
  logs-volume:

networks:
  custom-network:
    driver: bridge
  app-network-2:
    driver: bridge